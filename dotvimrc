call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

set bg=dark
set ai
set sw=2
set tabstop=2
set ic
set expandtab
set incsearch
set showcmd
set history=1000
set ruler
set hlsearch
set nocompatible
set t_Co=256
"colorscheme ir_black
colorscheme wombat
set wildmenu
let macvim_skip_colorscheme = 1
set gfn=Monaco\ for\ Powerline:h12

syntax on
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe ""normal! g`\"" | endif
filetype plugin indent on
"endif

autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4

"function! DoPrettyXML()
  "" save the filetype so we can restore it later
  "let l:origft = &ft
  "set ft=
  "" delete the xml header if it exists. This will
  "" permit us to surround the document with fake tags
  "" without creating invalid xml.
  "1s/<?xml .*?>//e
  "" insert fake tags around the entire document.
  "" This will permit us to pretty-format excerpts of
  "" XML that may contain multiple top-level elements.
  "0put ='<PrettyXML>'
  "$put ='</PrettyXML>'
  "silent %!xmllint --format -
  "" xmllint will insert an <?xml?> header. it's easy enough to delete
  "" if you don't want it.
  "" delete the fake tags
  "2d
  "$d
  "" restore the 'normal' indentation, which is one extra level
  "" too deep due to the extra tags we wrapped around the document.
  "silent %<
  "" back to home
  "1
  "" restore the filetype
  "exe "set ft=" . l:origft
"endfunction
"command! PrettyXML call DoPrettyXML()

au BufNewFile,BufRead *.vm setfiletype javascript
au BufNewFile,BufRead *jakefile* setfiletype javascript


" lhs comments
"map ,# :s/^/#/<CR>:nohlsearch<CR>
"map ,/ :s/^/\/\//<CR>:nohlsearch<CR>
"map ,> :s/^/> /<CR>:nohlsearch<CR>
"map ," :s/^/\"/<CR>:nohlsearch<CR>
"map ,% :s/^/%/<CR>:nohlsearch<CR>
"map ,! :s/^/!/<CR>:nohlsearch<CR>
"map ,; :s/^/;/<CR>:nohlsearch<CR>
"map ,- :s/^/--/<CR>:nohlsearch<CR>
"map ,c :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>:nohlsearch<CR>
"
"" wrapping comments
"map ,* :s/^\(.*\)$/\/\* \1 \*\//<CR>:nohlsearch<CR>
"map ,( :s/^\(.*\)$/\(\* \1 \*\)/<CR>:nohlsearch<CR>
"map ,< :s/^\(.*\)$/<!-- \1 -->/<CR>:nohlsearch<CR>
"map ,d :s/^\([/(]\*\\|<!--\) \(.*\) \(\*[/)]\\|-->\)$/\2/<CR>:nohlsearch<CR>
"

let g:tagbar_usearrows = 1
nnoremap <leader>l :TagbarToggle<CR>

" Map ctrl + arrow keys to move through windows
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"Enable NERDTree
map <leader>n :NERDTreeToggle<CR>


" ACK plugin for fuzzy searches
" nmap <leader>a <Esc>:Ack!

" Tab completion 

" Fugitive enable
set laststatus=2
"set statusline=%{fugitive#statusline()}
"set statusline=%t\ %y\ format:\ %{&ff};\ [%c,%l]
"set statusline=%t[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%=%c,%l/%L\ %P
" set statusline=[%n]\ %<%.99f\ %h%w%m%r%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%{fugitive#statusline()}%y%=%-16(\ %l,%c-%v\ %)%P
" let g_airline_section_b = {fugitive#statusline()}


" Disable web-indent logging
let g:js_indent_log = 0

" Highlighting errors
hi SpellBad cterm=underline ctermbg=black ctermfg=red

"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/

" Configure CTRL-arrow keys to move between windows (miniBufExplorer plugin)
"let g:miniBufExplMapWindowNavArrows = 1
" Configure (SHIFT)-CTRL-TAB to switch through open windows
"    (miniBufExplorer plugin)
"let g:miniBufExplMapCTabSwitchBuffs = 1


" set mouse=a " Enable the mouse
"set ttymouse=xterm2
"behave xterm
"set selectmode=mouse
let g:ctrlp_use_caching = 1
"let g:ctrlp_cmd = 'CtrlPBuffer'
"let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_clear_cache_on_exit = 0
" let g:ctrlp_working_path_mode = 'ra'

map <F2> :CtrlP<CR> 
let g:NERDTreeDirArrows=1
"let g:SyntasticDisable=1
"let g:pyflakes_autostart = 0
set backspace=indent,eol,start

" for linux and windows users (using the control key)
"map <C-S-]> gt
"map <C-S-[> gT
"map <C-1> 1gt
"map <C-2> 2gt
"map <C-3> 3gt
"map <C-4> 4gt
"map <C-5> 5gt
"map <C-6> 6gt
"map <C-7> 7gt
"map <C-8> 8gt
"map <C-9> 9gt
"map <C-0> :tablast<CR>
" OS X specifically
map <Esc>[Z <s-tab>
map <s-tab> :bn<CR>

" Paste toggle
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

filetype plugin on
"set ofu=syntaxcomplete#Complete

"au FileType python set omnifunc=pythoncomplete#Complete
"let g:SuperTabDefaultCompletionType = "context"

"let g:SuperTabDefaultCompletionType = "context"
"

" Whitespace handling
" Highlight with red
" highlight ExtraWhitespace ctermbg=red guibg=red
" match ExtraWhitespace /\s\+$/
" On auto indent, make sure that whitespace is removed
" inoremap <CR> x<BS><CR>
set synmaxcol=120
" set nowrap

let g:NERDTreeChDirMode       = 2
let g:ctrlp_working_path_mode = 'rw'

" Folding
" set foldmethod=syntax
" set foldlevelstart=1

" For python etc
" set foldmethod=indent
" set foldnestmax=2

"let javaScript_fold=1         " JavaScript
"let perl_fold=1               " Perl
"let php_folding=1             " PHP
"let r_syntax_folding=1        " R
"let ruby_fold=1               " Ruby
"let sh_fold_enabled=1         " sh
"let vimsyn_folding='af'       " Vim script
"let xml_syntax_folding=1      " XML

"augroup vimrc
"  au BufReadPre * setlocal foldmethod=indent
"  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
"augroup END

let g:session_autoload = 'no'
let g:session_autosave = 'no'


" Status line
let g:bufferline_echo = 0
set noshowmode
let g:airline#extensions#tabline#enabled = 1
set encoding=utf-8
let g:airline_powerline_fonts = 1

" Map set paste and no paste to F10
set pastetoggle=<F10>

set nofoldenable    " disable folding

let g:pymode_paths=["/usr/local/lib/python2.7/site-packages/"]
" After enabling python mode, custom things
let g:pymode_options = 0
setlocal complete+=t
setlocal formatoptions-=t
setlocal nowrap
setlocal textwidth=79
setlocal commentstring=#%s
setlocal define=^\s*\\(def\\\\|class\\)

let g:pymode_rope = 0
let g:pymode_lint = 0
let g:pymode_options_colorcolumn = 0
let g:pymode_doc = 0
let g:pymode_virtualenv = 0
set nonumber
set visualbell t_vb=
